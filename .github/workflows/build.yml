name: R

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  Building-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.1.1'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev        
          sudo apt-get install -y libharfbuzz-dev libfribidi-dev libfreetype6-dev
          sudo apt-get install -y libudunits2-dev libgdal-dev libgeos-dev libproj-dev
          sudo apt-get install -y pkg-config

      - name: Install R dependencies
        run: |
          install.packages("remotes")
          remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: Session info
        run: sessionInfo()
        shell: Rscript {0}

      - name: Build package
        run: |
          R CMD build . --no-build-vignettes --no-manual
        shell: bash

      - name: Check build directory (post-build)
        run: |
          echo "Checking current directory after build:"
          ls -l .
          echo "Checking parent directory after build:"
          ls -l ..
        shell: bash
        
      - name: Verify package tarball exists
        id: verify_tarball
        run: |
          tarball=$(ls ./ForestForesight_*.tar.gz)
          if [ -f "$tarball" ]; then
            echo "Package tarball found: $tarball"
            echo "TARBALL_PATH=$tarball" >> $GITHUB_ENV
          else
            echo "Package tarball NOT found!"
            exit 1
          fi
        shell: bash

      # Get current version from file or initialize
      - name: Get current version
        id: get_version
        run: |
          # Default version components
          MAJOR=1
          MINOR=0
          PATCH=0

          # Check if a VERSION file exists and extract current version
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION)
            MAJOR=$(echo $VERSION | cut -d '.' -f 1)
            MINOR=$(echo $VERSION | cut -d '.' -f 2)
            PATCH=$(echo $VERSION | cut -d '.' -f 3)
          fi
          
          # Output current version components to the GitHub environment
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV
          
      # Adjust the version number based on the pull request title
      - name: Set dynamic version number
        id: set_version
        run: |
          # Extract the pull request title
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Pull request title: $PR_TITLE"

          # Check for MAJOR or MINOR in the title and update version accordingly
          if [[ "$PR_TITLE" == *"MAJOR"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$PR_TITLE" == *"MINOR"* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          # Combine the updated version
          VERSION="$MAJOR.$MINOR.$PATCH"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Save the new version to a VERSION file
          echo "$VERSION" > VERSION

      # Display the newly set version
      - name: Display new version
        run: echo "New version is ${{ env.VERSION }}"
        
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ForestForesight ${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.TARBALL_PATH }}
          asset_name: ForestForesight_${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip

      - name: Final directory listing (post-upload)
        run: |
          echo "Final check of directories:"
          ls -l .
          ls -l ..
        shell: bash