name: R

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  Building-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      ### RELEASE VERSION SECTION ###
      - name: Get current version (MAJOR.MINOR) from DESCRIPTION file
        id: get_version
        run: |
          # Extract version from DESCRIPTION file
          VERSION=$(grep '^Version:' DESCRIPTION | awk '{print $2}')
          MAJOR=$(echo $VERSION | cut -d '.' -f 1)
          MINOR=$(echo $VERSION | cut -d '.' -f 2)
          
          # Output MAJOR and MINOR to GitHub environment
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV    

      - name: Get latest PATCH version from GitHub releases
        id: get_latest_patch
        run: |
          # Get the list of existing releases
          releases=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases")
      
          # Find the latest release with the same MAJOR.MINOR version
          latest_patch=$(echo "$releases" | jq -r --arg MAJOR "$MAJOR" --arg MINOR "$MINOR" '
            [
              .[] | select(.tag_name | startswith("\($MAJOR).\($MINOR).")) | .tag_name
            ] | map(split(".")[2] | tonumber) | max // 0
          ')
      
          # Increment the PATCH version
          PATCH=$((latest_patch + 1))
      
          # Output PATCH to the GitHub environment
          echo "PATCH=$PATCH" >> $GITHUB_ENV    

      # Combine the version components
      - name: Set version number
        run: |
          VERSION="$MAJOR.$MINOR.$PATCH"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Display the newly set version
      - name: Display new version
        run: echo "New version is ${{ env.VERSION }}"
      ### END OF RELEASE VERSION SECTION ###
      
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.1.1'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev        
          sudo apt-get install -y libharfbuzz-dev libfribidi-dev libfreetype6-dev
          sudo apt-get install -y libudunits2-dev libgdal-dev libgeos-dev libproj-dev
          sudo apt-get install -y pkg-config

      - name: Session info
        run: sessionInfo()
        shell: Rscript {0}

      - name: Build package
        run: |
          R CMD build . --no-build-vignettes --no-manual
        shell: bash

      - name: Check build directory (post-build)
        run: |
          echo "Checking current directory after build:"
          ls -l .
          echo "Checking parent directory after build:"
          ls -l ..
        shell: bash
        
      - name: Verify package tarball exists
        id: verify_tarball
        run: |
          tarball=$(ls ./ForestForesight_*.tar.gz)
          if [ -f "$tarball" ]; then
            echo "Package tarball found: $tarball"
            echo "TARBALL_PATH=$tarball" >> $GITHUB_ENV
          else
            echo "Package tarball NOT found!"
            exit 1
          fi
        shell: bash
      
      - name: Get PR info
        id: get_pr_info
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query ($prNumber: Int!) {
              repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
                pullRequest(number: $prNumber) {
                  title
                  url
                }
              }
            }
          variables: '{"prNumber": ${{ github.event.pull_request.number }}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ForestForesight ${{ env.VERSION }}
          body: |
            This release is based on PR [#${{ github.event.pull_request.number }}](${{ steps.get_pr_info.outputs.url }}): ${{ steps.get_pr_info.outputs.title }}
          draft: false
          prerelease: false
  
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.TARBALL_PATH }}
          asset_name: ForestForesight_${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip
    
      - name: Final directory listing (post-upload)
        run: |
          echo "Final check of directories:"
          ls -l .
          ls -l ..
        shell: bash